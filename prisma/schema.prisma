generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Admin users for the administrative dashboard
model Admin {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  passwordHash   String
  name           String
  role           String   @default("admin")
  createdAt      DateTime @default(now())
  lastLoginAt    DateTime?
  active         Boolean  @default(true)
  auditLogs      AuditLog[]
}

// Audit logging for admin actions
model AuditLog {
  id             Int      @id @default(autoincrement())
  adminId        Int
  admin          Admin    @relation(fields: [adminId], references: [id])
  action         String
  details        String?
  ipAddress      String?
  createdAt      DateTime @default(now())
}

// Stations/Destinations
model Destination {
  id              Int      @id @default(autoincrement())
  name            String
  code            String   @unique
  city            String
  state           String?
  country         String
  active          Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  originRoutes     Route[]  @relation("OriginDestination")
  destinationRoutes Route[]  @relation("DestinationToRoute")
  distances        Distance[] @relation("DestinationToDistance")
  toDistances      Distance[] @relation("ToDestinationDistance")
}

// Distances between destinations
model Distance {
  id              Int      @id @default(autoincrement())
  fromDestinationId Int
  toDestinationId   Int
  distanceKm      Float
  travelTimeMinutes Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  fromDestination  Destination @relation("DestinationToDistance", fields: [fromDestinationId], references: [id])
  toDestination    Destination @relation("ToDestinationDistance", fields: [toDestinationId], references: [id])

  @@unique([fromDestinationId, toDestinationId])
}

// Train information
model Train {
  id              Int      @id @default(autoincrement())
  name            String
  number          String   @unique
  description     String?
  active          Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  schedules       Schedule[]
}

// Train class types
model Class {
  id              Int      @id @default(autoincrement())
  name            String   @unique // economy, business, etc.
  description     String?
  active          Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  routeClasses    RouteClass[]
  tickets         Ticket[]
}

// Routes between destinations
model Route {
  id              Int      @id @default(autoincrement())
  originId        Int
  destinationId   Int
  distance        Float?
  active          Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  origin          Destination @relation("OriginDestination", fields: [originId], references: [id])
  destination     Destination @relation("DestinationToRoute", fields: [destinationId], references: [id])
  schedules       Schedule[]
  routeClasses    RouteClass[]
  
  @@unique([originId, destinationId])
}

// Class pricing for specific routes
model RouteClass {
  id              Int      @id @default(autoincrement())
  routeId         Int
  classId         Int
  basePrice       Float
  active          Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  route           Route    @relation(fields: [routeId], references: [id])
  class           Class    @relation(fields: [classId], references: [id])
  
  @@unique([routeId, classId])
}

// Train schedules
model Schedule {
  id              Int      @id @default(autoincrement())
  trainId         Int
  routeId         Int
  departureTime   DateTime
  arrivalTime     DateTime
  recurring       Boolean  @default(false)
  recurringDays   String?  // JSON array of days ["MON", "WED", "FRI"]
  active          Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  train           Train    @relation(fields: [trainId], references: [id])
  route           Route    @relation(fields: [routeId], references: [id])
  availabilities  SeatAvailability[]
  tickets         Ticket[]
}

// Seat availability for each schedule
model SeatAvailability {
  id              Int      @id @default(autoincrement())
  scheduleId      Int
  classId         Int
  totalSeats      Int
  bookedSeats     Int      @default(0)
  date            DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  schedule        Schedule @relation(fields: [scheduleId], references: [id])
  
  @@unique([scheduleId, classId, date])
}

// Tickets
model Ticket {
  id              String   @id @default(uuid())
  scheduleId      Int
  classId         Int
  passengerName   String
  passengerEmail  String?
  passengerPhone  String?
  referenceNumber String   @unique
  seatNumber      String?
  price           Float
  isPaid          Boolean  @default(true)
  isValid         Boolean  @default(true)
  purchaseDate    DateTime @default(now())
  validUntil      DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  schedule        Schedule @relation(fields: [scheduleId], references: [id])
  class           Class    @relation(fields: [classId], references: [id])
}